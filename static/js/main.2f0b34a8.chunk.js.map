{"version":3,"sources":["helpers/data/teamsData.js","helpers/data/guildData.js","GuildOptions/GuildOptions.js","GuildRoster/GuildRoster.js","PlayerRoster/PlayerRoster.js","TWDisplay/TWDisplay.js","Main/Main.js","App/App.js","serviceWorker.js","index.js"],"names":["Promise","resolve","reject","axios","get","then","res","data","catch","err","GuildOptions","state","className","React","Component","GuildRoster","guildRoster","formattedRoster","buildColumns","columns","props","approvedTeamOrder","map","teamId","push","formatGuildRoster","guildMember","teamIds","memberData","name","playerName","lastUpdated","Date","toLocaleString","month","day","year","forEach","playerRoster","team","id","teamPower","printGuildTable","tables","$","refs","guildTable","DataTable","autoWidth","destroy","pageLength","scrollX","this","setState","printHeaders","key","nameHeader","dateHeader","unshift","ref","PlayerRoster","printPlayerRoster","teamRow","uniqueId","leader","toon2","toon3","toon4","toon5","TWDisplay","buildGuildRoster","guildMembersData","tempRoster","guildMemberData","last_updated","buildPlayerTeams","player","approvedTeamList","approvedTeams","newRoster","playerToons","Object","values","p","n","toonsWithPower","power","length","bestOverallTeams","findBestOverallTeams","sort","a","b","topBestTeam","findTopBestTeam","index","findIndex","x","splice","approvedTeam","toonsNeeded","selectRequiredToons","tempSquad","toonNeeded","matchedToon","filter","pt","matchedToonWithPower","find","toon","emptySlots","i","toonToAdd","selectToonToAdd","reduce","c","bestOverallTeamId","matchedTeam","at","indexOf","squadMember","getTeamComps","rawPlayerData","requiredToons","leaderReq","leaderName","toon2Req","toon2Name","toon3Req","toon3Name","toon4Req","toon4Name","toon5Req","toon5Name","subsWithPower","filteredToonsWithPower","subsData","sub","subs","split","twp","duplicate","printPlayerRosters","onClick","Main","guildData","orderTeams","t","unorderedTeams","newTeamList","orderedTeam","uot","teamsData","orderedTeams","console","error","GuildData","players","profile_count","galactic_power","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f0b34a8.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst getTeams = () => new Promise((resolve, reject) => {\n  axios.get('https://api.sheety.co/a710e43e-2721-45bb-b722-dafafea5b152')\n    .then((res) => {\n      resolve(res.data);\n    })\n    .catch((err) => reject(err));\n});\n\nexport default { getTeams };\n","import axios from 'axios';\n\nconst getGuildData = () => new Promise((resolve, reject) => {\n  axios.get('https://cors-anywhere.herokuapp.com/https://swgoh.gg/api/guild/4268/')\n    .then((res) => {\n      resolve(res.data);\n    })\n    .catch((err) => reject(err));\n});\n\nexport default { getGuildData };\n","import React from 'react';\n\nimport './GuildOptions.scss';\n\nclass GuildOptions extends React.Component {\n  state = {\n\n  }\n\n  componentDidMount() {\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"guildOptions-header\">\n        </div>\n      </>\n    );\n  }\n}\n\nexport default GuildOptions;\n","import React from 'react';\nimport $ from 'jquery';\nimport 'datatables.net';\n\nimport './GuildRoster.scss';\n\nclass GuildRoster extends React.Component {\n  state = {\n    guildRoster: [],\n    formattedRoster: [],\n  }\n\n  buildColumns = () => {\n    const columns = [{ data: 'name' }, { data: 'lastUpdated' }];\n    const teamIds = [...this.props.approvedTeamOrder];\n    teamIds.map((teamId) => columns.push({ data: teamId }));\n    return columns;\n  }\n\n  componentDidMount() {\n    const formattedRoster = this.formatGuildRoster();\n    this.setState({\n      guildRoster: this.props.guildRoster,\n      formattedRoster,\n    });\n  }\n\n  formatGuildRoster = () => {\n    const guildRoster = [...this.props.guildRoster];\n    const newRoster = guildRoster.map((guildMember) => {\n      const teamIds = [...this.props.approvedTeamOrder];\n      const memberData = {};\n      memberData.name = guildMember.playerName;\n      const options = { month: 'short', day: 'numeric', year: 'numeric' };\n      memberData.lastUpdated = new Date(guildMember.lastUpdated * 1000).toLocaleString('en-US', options);\n      // memberData.lastUpdated = new Date(guildMember.lastUpdated * 1000);\n      teamIds.forEach((teamId) => {\n        memberData[teamId] = '';\n      });\n      guildMember.playerRoster.forEach((team) => {\n        memberData[team.id] = team.teamPower;\n      });\n      return memberData;\n    });\n    return newRoster;\n  }\n\n  printGuildTable = () => {\n    const tables = this.buildColumns();\n    $(this.refs.guildTable).DataTable({\n      autoWidth: true,\n      columns: tables,\n      data: this.state.formattedRoster,\n      destroy: true,\n      // fixedColumns: {\n      //   leftColumns: 1,\n      // },\n      pageLength: 50,\n      // scrollCollapse: false,\n      scrollX: true,\n    });\n  }\n\n  render() {\n    let printHeaders = [];\n    if (this.refs.guildTable) {\n      printHeaders = this.props.approvedTeamOrder.map((team) => <th key={team}>{team}</th>);\n      const nameHeader = <th key=\"Name\">Name</th>;\n      const dateHeader = <th key=\"LastUpdated\">LastUpdated</th>;\n      printHeaders.unshift(dateHeader);\n      printHeaders.unshift(nameHeader);\n      this.printGuildTable();\n    }\n\n    return (\n      <>\n        <table ref=\"guildTable\" className=\"display compact\">\n          <thead>\n            <tr>\n              {printHeaders}\n            </tr>\n          </thead>\n        </table>\n      </>\n    );\n  }\n}\n\nexport default GuildRoster;\n","import React from 'react';\n\nimport './PlayerRoster.scss';\n\nclass PlayerRoster extends React.Component {\n  render() {\n    const { playerName, playerRoster } = this.props;\n    const printPlayerRoster = playerRoster.map((teamRow) => {\n      const uniqueId = `${teamRow.id}-${teamRow.teamPower}`;\n      return (<tr key={uniqueId}>\n        <td>{teamRow.id}</td>\n        <td>{teamRow.teamPower}</td>\n        <td>{teamRow.leader.name}</td>\n        <td>{teamRow.toon2.name}</td>\n        <td>{teamRow.toon3.name}</td>\n        <td>{teamRow.toon4.name}</td>\n        <td>{teamRow.toon5.name}</td>\n      </tr>);\n    });\n    return (\n      <>\n        <div className=\"playerHeader mt-3\">\n          <h2>{playerName}</h2>\n        </div>\n        <table className=\"minimalistBlack mb-3\">\n          <thead>\n            <tr>\n              <th>Team Id</th>\n              <th>Power</th>\n              <th>Leader</th>\n              <th>Toon 2</th>\n              <th>Toon 3</th>\n              <th>Toon 4</th>\n              <th>Toon 5</th>\n            </tr>\n          </thead>\n          <tbody>\n            {printPlayerRoster}\n          </tbody>\n        </table>\n      </>\n    );\n  }\n}\n\nexport default PlayerRoster;\n","import React from 'react';\n\nimport './TWDisplay.scss';\n\nimport GuildRoster from '../GuildRoster/GuildRoster';\nimport PlayerRoster from '../PlayerRoster/PlayerRoster';\n\nimport subsData from './Subs.json';\n\nclass TWDisplay extends React.Component {\n  state = {\n    guildRoster: [],\n  };\n\n  buildGuildRoster = (guildMembersData) => {\n    const tempRoster = [];\n    guildMembersData.forEach((guildMemberData) => {\n      const playerName = guildMemberData.data.name;\n      const lastUpdated = guildMemberData.data.last_updated;\n      const playerRoster = this.buildPlayerTeams(guildMemberData);\n      tempRoster.push({ playerName, playerRoster, lastUpdated });\n    });\n    // remap tempRoster from array to object\n    return tempRoster;\n  }\n\n  buildPlayerTeams = (player) => {\n    // definitions\n    const approvedTeamList = [...this.props.approvedTeams].map((team) => team[0]);\n    const newRoster = [];\n    const playerToons = Object.values(player)\n      .map((p) => p)[0]\n      // REMOVED BECAUSE SOME CHARACTERS DON'T HAVE A COMBAT TYPE\n      // .filter((c) => c.data.combat_type === 1)\n      .map((n) => n.data.name);\n    const toonsWithPower = Object.values(player)\n      .map((p) => p)[0]\n      .map((n) => ({ name: n.data.name, power: n.data.power }));\n\n    while (approvedTeamList.length) {\n      // find the highest power teams regardless of duplicates, and sort them by teamPower\n      const bestOverallTeams = this.findBestOverallTeams(\n        approvedTeamList,\n        playerToons,\n        toonsWithPower,\n      );\n      bestOverallTeams.sort((a, b) => ((a.teamPower < b.teamPower) ? 1 : -1));\n\n      if (bestOverallTeams[0].teamPower > 0) {\n        // find the best toons for the highest powered team not yet selected\n        const topBestTeam = this.findTopBestTeam(\n          approvedTeamList,\n          playerToons,\n          toonsWithPower,\n          bestOverallTeams[0].id,\n        );\n        // push the topBestTeam to the newRoster,\n        // remove from approvedTeamList,\n        // loop until there are no more approvedTeams available\n        newRoster.push(topBestTeam);\n        const index = approvedTeamList.findIndex((x) => (\n          topBestTeam ? x.id === topBestTeam.id : -1\n        ));\n        approvedTeamList.splice(index, 1);\n      } else {\n        const topBestTeam = this.findTopBestTeam(bestOverallTeams, playerToons);\n        const index = approvedTeamList.findIndex((x) => (\n          topBestTeam ? x.id === topBestTeam.id : -1\n        ));\n        approvedTeamList.splice(index, 1);\n      }\n    }\n    return newRoster;\n  }\n\n  findBestOverallTeams = (approvedTeamList, playerToons, toonsWithPower) => {\n    const bestOverallTeams = [];\n\n    // loops through approved teams\n    approvedTeamList.forEach((approvedTeam) => {\n      const team = approvedTeam;\n      const toonsNeeded = this.selectRequiredToons(team);\n      let tempSquad = [];\n\n      // if the player has the required toons,\n      // that toon is removed from their array and\n      // added into the corresponding squad in the newRoster\n      if (playerToons) {\n        toonsNeeded.forEach((toonNeeded) => {\n          const matchedToon = playerToons.filter((pt) => pt === toonNeeded);\n          if (matchedToon[0]) {\n            const matchedToonWithPower = toonsWithPower\n              .find((toon) => matchedToon[0] === toon.name);\n            tempSquad.push({\n              name: matchedToonWithPower.name,\n              power: matchedToonWithPower.power,\n            });\n          }\n        });\n      }\n\n      if (tempSquad.length === toonsNeeded.length) {\n        // fill in the rest of the squad members for\n        // teams that have required toons\n        if (tempSquad.length > 0) {\n          if (tempSquad.length < 5) {\n            const emptySlots = 5 - tempSquad.length;\n            for (let i = 0; i < emptySlots; i += 1) {\n              const toonToAdd = this.selectToonToAdd(\n                toonsWithPower,\n                playerToons,\n                team.id,\n                tempSquad,\n              );\n              if (toonToAdd) {\n                tempSquad.push(toonToAdd);\n              }\n            }\n          }\n          // if the squad is incomplete, put the toons back in the pool\n          if (tempSquad.length < 5) {\n            tempSquad = {\n              id: team.id,\n              teamPower: 0,\n            };\n            bestOverallTeams.push(tempSquad);\n          } else {\n            const teamPower = tempSquad\n              .map((a) => a.power)\n              .reduce((b, c) => b + c);\n            // re-maps squad to include key/value pairs\n            tempSquad = {\n              leader: tempSquad[0],\n              toon2: tempSquad[1],\n              toon3: tempSquad[2],\n              toon4: tempSquad[3],\n              toon5: tempSquad[4],\n              teamPower,\n              id: team.id,\n            };\n            bestOverallTeams.push(tempSquad);\n          }\n        }\n      } else if (tempSquad.length < toonsNeeded.length) {\n        tempSquad = {\n          id: team.id,\n          teamPower: 0,\n        };\n        bestOverallTeams.push(tempSquad);\n      }\n    });\n    return bestOverallTeams;\n  }\n\n  findTopBestTeam = (approvedTeamList, playerToons, toonsWithPower, bestOverallTeamId) => {\n    const topBestTeam = [];\n    let toonsNeeded = [];\n    let tempSquad = [];\n    const matchedTeam = approvedTeamList.filter((at) => at.id === bestOverallTeamId)[0];\n    if (matchedTeam) {\n      toonsNeeded = this.selectRequiredToons(matchedTeam);\n    }\n\n    if (playerToons) {\n      toonsNeeded.forEach((toonNeeded) => {\n        const matchedToon = playerToons.filter((pt) => pt === toonNeeded);\n        if (matchedToon[0]) {\n          const matchedToonWithPower = toonsWithPower\n            .find((toon) => matchedToon[0] === toon.name);\n          const index = playerToons.indexOf(matchedToon[0]);\n          tempSquad.push({\n            name: matchedToonWithPower.name,\n            power: matchedToonWithPower.power,\n          });\n          playerToons.splice(index, 1);\n        }\n      });\n    }\n\n    if (tempSquad.length > 0) {\n      if (tempSquad.length < 5) {\n        const emptySlots = 5 - tempSquad.length;\n        for (let i = 0; i < emptySlots; i += 1) {\n          const toonToAdd = this.selectToonToAdd(\n            toonsWithPower,\n            playerToons,\n            bestOverallTeamId,\n            tempSquad,\n          );\n          if (toonToAdd) {\n            const matchedToon = playerToons.filter((pt) => pt === toonToAdd.name);\n            const index = playerToons.indexOf(matchedToon[0]);\n            tempSquad.push(toonToAdd);\n            playerToons.splice(index, 1);\n          }\n        }\n      }\n\n      if (tempSquad.length < 5) {\n        tempSquad.forEach((squadMember) => {\n          playerToons.push(squadMember.name);\n        });\n        tempSquad = {\n          id: bestOverallTeamId,\n          teamPower: 0,\n        };\n        topBestTeam.push(tempSquad);\n      } else {\n        const teamPower = tempSquad\n          .map((a) => a.power)\n          .reduce((b, c) => b + c);\n        tempSquad = {\n          leader: tempSquad[0],\n          toon2: tempSquad[1],\n          toon3: tempSquad[2],\n          toon4: tempSquad[3],\n          toon5: tempSquad[4],\n          teamPower,\n          id: bestOverallTeamId,\n        };\n        topBestTeam.push(tempSquad);\n      }\n    }\n    return topBestTeam[0];\n  };\n\n  getTeamComps = () => {\n    const rawPlayerData = [...this.props.rawPlayerData];\n    // USED FOR MULTIPLAYER\n    const guildRoster = this.buildGuildRoster(rawPlayerData);\n    this.setState({ guildRoster });\n    // USED FOR SINGLE PLAYER TESTING\n    // const playerRoster = this.buildPlayerTeams(rawPlayerData[31]);\n    // console.error('playerRoster', playerRoster);\n  }\n\n  selectRequiredToons = (team) => {\n    const requiredToons = [];\n    if (team.leaderReq === true) { requiredToons.push(team.leaderName); }\n    if (team.toon2Req === true) { requiredToons.push(team.toon2Name); }\n    if (team.toon3Req === true) { requiredToons.push(team.toon3Name); }\n    if (team.toon4Req === true) { requiredToons.push(team.toon4Name); }\n    if (team.toon5Req === true) { requiredToons.push(team.toon5Name); }\n    return requiredToons;\n  };\n\n  selectToonToAdd = (toonsWithPower, playerToons, teamId, tempSquad) => {\n    const subsWithPower = [];\n    const filteredToonsWithPower = toonsWithPower\n      .filter((toon) => playerToons.indexOf(toon.name) !== -1);\n    // fills in subsWithPower by finding the subs in that team and\n    // returns the toonsWithPower objects of those toons\n    subsData\n      .filter((sub) => sub.id === teamId)[0]\n      .subs\n      .split(', ')\n      .forEach((sub) => {\n        const matchedToonWithPower = filteredToonsWithPower.filter((twp) => twp.name === sub)[0];\n        if (matchedToonWithPower) {\n          subsWithPower.push(matchedToonWithPower);\n        }\n      });\n    const duplicate = subsWithPower.filter((sub) => tempSquad.indexOf(sub) !== -1);\n    // sorts the subs by the highest power\n    // then returns an array of the names of those subs\n    subsWithPower.sort((a, b) => ((a.power < b.power) ? 1 : -1));\n    if (duplicate.length > 0) {\n      return subsWithPower[duplicate.length];\n    }\n    return subsWithPower[0];\n  };\n\n  render() {\n    let printPlayerRosters = [];\n    const guildRoster = [...this.state.guildRoster];\n    if (this.state.guildRoster.length > 0) {\n      printPlayerRosters = guildRoster.map((player) => (<PlayerRoster\n        playerName = {player.playerName}\n        playerRoster = {player.playerRoster}\n      />));\n    }\n    return (\n      <>\n        <div className=\"text-center\">\n          <div className=\"d-flex flex-column justify-content-center align-items-center\">\n            {this.props.approvedTeams.length > 0 ? <button className=\"btn btn-primary\" onClick={this.getTeamComps}>Get Team Comps</button> : ''}\n          </div>\n          {this.state.guildRoster.length > 0 ? <GuildRoster\n            guildRoster = {this.state.guildRoster}\n            approvedTeamOrder = {this.props.approvedTeamOrder}\n          /> : ''}\n          <div className=\"d-flex flex-column\">\n            {printPlayerRosters}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default TWDisplay;\n","import React from 'react';\n\n// FOR TESTING PURPOSES\n// import roster from './GuildRoster.json';\n\nimport teamsData from '../helpers/data/teamsData';\nimport GuildData from '../helpers/data/guildData';\nimport GuildOptions from '../GuildOptions/GuildOptions';\nimport TWDisplay from '../TWDisplay/TWDisplay';\n\nimport './Main.scss';\n\nconst approvedTeamOrder = [\n  // S-Tier\n  '501ST',\n  'SITH_EMPIRE_W_MALAK',\n  'SITH_EMPIRE_WO_MALAK',\n  'JEDI_REVAN',\n  // A-Tier\n  'SITH_TRI',\n  'REBELS_CLS',\n  'GALACTIC_REPUBLIC',\n  'GEONOSIANS',\n  'NS_ASAJJ',\n  'NS_MT',\n  'NS_MT_NA',\n  'SEP_DROIDS',\n  'CLONES_SHAAKTI',\n  'REX_501',\n  // B-Tier\n  'JEDI_BASTILA',\n  'FO_KRU',\n  'BH_BOSSK',\n  'BH_JANGO',\n  'EP',\n  'JTR',\n  'EWOKS',\n  // C-Tier\n  'OR_CARTH',\n  'QIRA',\n  'IT',\n  // D-Tier\n  'REBELS_WIGGS',\n  'PHOENIX',\n  'ROGUE_ONE',\n  'IT_THRAWN',\n  'JEDI_QGJ',\n  'REX_WAMPA',\n  'WAMPA_SOLO',\n  // E-Tier\n  'JAWAS',\n  'CLONES_CODY',\n  // 'EP_ANTI_REBEL',\n  // 'EP_ANTI-TRAYA',\n  // 'EP_TRIO',\n  // 'EP_TRAYA',\n  // Rest/Variations\n  // 'SION_SOLO',\n  'DK_ANTI_REBEL',\n  'DROIDS_ANTI_MALAK',\n  // 'NEST_SOLO',\n  'EWOKS_C3PO',\n  // 'GALACTIC_REPUBLIC_C3PO',\n  'GK',\n  // 'IG-88_HI',\n  // 'JEDI_BASTILA_REVAN',\n  'MAGMA',\n  'NS_NEST',\n  'QIRA_NEST_HODA',\n  'QIRA_NEST_HODA_FULL',\n  // 'REBELS_CLS_THRAWN',\n  'REBELS_CLS_CHAZE',\n  'REBELS_DANGER_ZONE',\n  'JTR_DROIDS',\n  'JTR_HOLDO',\n  'REX',\n  'SEP_NUTE',\n  'SITH_MAUL',\n  'ZADER',\n];\n\nclass Main extends React.Component {\n  state = {\n    approvedTeams: [],\n    guildData: [],\n    rawPlayerData: [],\n  }\n\n  componentDidMount() {\n    teamsData.getTeams()\n      .then((res) => {\n        const orderedTeams = this.orderTeams(res);\n        this.setState({ approvedTeams: orderedTeams });\n      })\n      .catch((err) => console.error(err));\n    GuildData.getGuildData()\n      .then((res) => this.setState({ guildData: res.data, rawPlayerData: res.players }))\n      .catch((err) => console.error(err));\n    // FOR TESTING PURPOSES - to not ping swgoh.gg for testing\n    // this.setState({ guildData: roster.data, rawPlayerData: roster.players });\n  }\n\n  orderTeams = (t) => {\n    const unorderedTeams = t;\n    const newTeamList = [];\n    approvedTeamOrder.forEach((orderedTeam) => {\n      const team = unorderedTeams.filter((uot) => uot.id === orderedTeam);\n      newTeamList.push(team);\n    });\n    return newTeamList;\n  };\n\n  render() {\n    const { approvedTeams, guildData, rawPlayerData } = this.state;\n\n    return (\n      <>\n        <div className=\"main-header text-center\">\n          <h1>{guildData.name}</h1>\n          <div className=\"container d-flex flex-row justify-content-around\">\n            <p>Members: {guildData.profile_count}</p>\n            <p>Galactic Power: {guildData.galactic_power ? guildData.galactic_power.toLocaleString() : ''}</p>\n          </div>\n        </div>\n        <div>\n          <GuildOptions />\n          <TWDisplay\n            approvedTeamOrder = {approvedTeamOrder}\n            approvedTeams = {approvedTeams}\n            rawPlayerData = {rawPlayerData}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport Main from '../Main/Main';\n\nimport './App.scss';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/index.scss';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}